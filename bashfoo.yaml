# bashfoo.yaml

# https://github.com/dannguyen/bashfoo

# Dan Nguyen's personally curated list of bash/command-line commands and snippets
#   that are useful but yet he keeps forgetting

# Template:
#
#
# "slug_for_command":
#   date: YYYY-MM-DD
#
#   article:
#       title: related article title
#       url: https://example.com
#
#     code: |
#       find . -name "foo*"
#
#     output: |
#
#        sample output
#        from utils stdout/stedrr
#
############################################################################################################

"`unzip` only an archive's CSV files and pipe to stdout":
  date: 2020-08-11
  code: |
    unzip -p schools.zip "*.csv" > schools.csv

"`pygmentize` a code snippet into highlighted rich text that I can paste into GMail":
  date: 2020-08-11
  article:
    title: Pygments Command Line Interface
    url: https://pygments.org/docs/cmdline/
  code: |
    printf "SELECT name, id\n FROM datatable AS tx WHERE id > 100\n ORDER BY id ASC;" \
      | pygmentize -f rtf -l sql -O style=solarized-light \
      | pbcopy

  notes: |
    - Use `-L` to list all styles, formatters, and lexers
    - Use `-o` to output to file


"`rsync` the contents of one directory into another":
  date: 2020-08-06
  article:
    title: "How To Use Rsync to Sync Local and Remote Directories on a VPS"
    url: https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories-on-a-vps
  code: |
    rsync -av src_dir/ target_dir
  output: |
    building file list ... done
    created directory /target_dir
    ./
    .gitignore
    README.md
    static/media/
    static/media/demos/
    static/media/demos/find.mp4

    sent 452477 bytes  received 2378 bytes  50909710.00 bytes/sec
    total size is 472016  speedup is 1.00

  notes: |
    - only the source directory should have a trailing slash
    - the `-v` flag makes for verbose output
    - the `-n` flag does a dry run


"`xargs` (BSD) to pipe results into another command, one at a time":
  date: 2020-06-18
  article:
    title: "Execute a command once per line of piped input?"
    url: https://unix.stackexchange.com/questions/7558/execute-a-command-once-per-line-of-piped-input
  code: |
    echo Alice Bob Charlie | xargs -I{} -n1 echo 'Hey, {} is a great name!'
  output: |
    Hey, Alice is a great name!
    Hey, Bob is a great name!
    Hey, Charlie is a great name!


"`magick` convert image to favicon.ico":
  date: 2020-03-24
  article:
    title: Convert PNG to ICO
    url: https://imagemagick.org/discourse-server/viewtopic.php?t=36031
  code: |
    magick /tmp/testimage.png -background none -resize 128x128 -density 128x128 favicon.ico

"calculate total kilobytes of hard disk space for files with given extension(s)":
  date: 2020-02-18
  article:
    title: "Find the total size of certain files within a directory branch"
    url: https://unix.stackexchange.com/questions/41550/find-the-total-size-of-certain-files-within-a-directory-branch/148472
  code: |
    echo $(find . -type f \
            \( -iname "*.csv" -o -iname '*.xls*' \) \
            -printf "(%k/1024)+" \
            2>/dev/null; \
            echo 0;) | bc

  output: |
    15732

  notes: |

    - Requires the use of gnu-find (gfind on my MacOS)
    - use `-printf "%s+"` to print size by bytes
    - `2>/dev/null` hides error messages
    - `-iname` is case-insensitive


"`printf` to stderr":
  date: 2019-11-23
  article:
    title: print output to stderr, not stdout
    url: https://stackoverflow.com/questions/2990414/echo-that-outputs-to-stderr
  code: |
    >&2 printf 'Error: %s\n' 'There was a problem' 'And another problem'
  output: |
    Error: There was a problem
    Error: And another problem

"'stem' a filename, i.e. get filename sans path or extension":
  date: 2019-11-02
  article:
    title: Extract filename and extension in Bash
    url: https://stackoverflow.com/questions/965053/extract-filename-and-extension-in-bash
  code: |
    fullname=/tmp/hello/world.txt
    newname="a_whole_new_$(basename ${fullname%.*})"
    echo $newname
  output: |
    a_whole_new_world

"`pkill` using a file pattern":
  date: 2019-07-25
  article:
    url: https://stackoverflow.com/questions/8987037/how-to-kill-all-processes-with-a-given-partial-name
    title: How to kill all processes with a given partial name?
  code: |
    pkill -fil ipython
  output: |
    kill -15 90396
    kill -15 90523

"`pgrep` and get all process info":
  date: 2019-07-25
  article:
    url: https://serverfault.com/questions/77162/how-to-get-pgrep-to-display-full-process-info
    title: How to get pgrep to display full process info
  code: |
    # MacOS
    pgrep -fil 'rails'

    # Linux
    pgrep -af 'rails'

  output: |

    47502 rails master RBENV_VERSION=2.5.1 TERMINAL_FONT=Monaco
    47517 rails worker[0] RBENV_VERSION=2.5.1 TERMINAL_FONT=Monaco


"`tar` extraction, verbose":
  date: 2019-07-18
  article:
      title: The tar command explained
      url: https://www.howtoforge.com/tutorial/linux-tar-command/
  code: |
    tar xzfv ARCHIVE.TAR.GZ


"`find` file by name":
  article:
    title: 'How can I recursively find all files in current and subfolders based on wildcard matching?'
    url: https://stackoverflow.com/questions/5905054/how-can-i-recursively-find-all-files-in-current-and-subfolders-based-on-wildcard
  code: |
    find . -name "foo*"


"`find` directory name recursively":
  article:
    title: How can I recursively search for directory names with a particular string where the string is only part of the directory name
    url: https://askubuntu.com/questions/153144/how-can-i-recursively-search-for-directory-names-with-a-particular-string-where

  code: |
    find START_DIR -type d -name "PATTERN"



"`find` and execute command on each file":
  article:
    title: How to run find -exec?
    url: https://unix.stackexchange.com/questions/12902/how-to-run-find-exec

  code: |
    find ./PATTERN -exec FOO BAR {} \;

    find PlainText/*.md -exec wc -l {} \;

